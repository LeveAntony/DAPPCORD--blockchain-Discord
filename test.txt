import { useEffect, useState } from 'react'
import { ethers } from 'ethers'
import { io } from "socket.io-client"
// Components
import Navigation from './components/Navigation'
import Servers from './components/Servers'
import Channels from './components/Channels'
import Messages from './components/Messages'
// ABIs
import Dappcord from './abis/Dappcord.json'
// Config
import config from './config.json';
// Socket
const socket = io('ws://localhost:3030');
function App() {
const [provider, setProvider] = useState(null)
const [account, setAccount] = useState(null)
const [dappcord, setDappcord] = useState(null)
const [channels, setChannels] = useState([])
const [currentChannel, setCurrentChannel] = useState(null)
const [messages, setMessages] = useState([])
const loadBlockchainData = async () => {
const provider = new ethers.providers.Web3Provider(window.ethereum)
setProvider(provider)
const network = await provider.getNetwork()
const dappcord = new
ethers.Contract(config[network.chainId].Dappcord.address, Dappcord, provider)
setDappcord(dappcord)
const totalChannels = await dappcord.totalChannels()
const channels = []
for (var i = 1; i <= totalChannels; i++) {
17
const channel = await dappcord.getChannel(i)
channels.push(channel)
}
setChannels(channels)
window.ethereum.on('accountsChanged', async () => {
window.location.reload()
})
}
useEffect(() => {
loadBlockchainData()
// --> https://socket.io/how-to/use-with-react-hooks
socket.on("connect", () => {
socket.emit('get messages')
})
socket.on('new message', (messages) => {
setMessages(messages)
})
socket.on('get messages', (messages) => {
setMessages(messages)
})
return () => {
socket.off('connect')
socket.off('new message')
socket.off('get messages')
}
}, [])
return (
<div>
<Navigation account={account} setAccount={setAccount} />
<main>
<Servers />
<Channels
provider={provider}
account={account}
dappcord={dappcord}
channels={channels}
currentChannel={currentChannel}
setCurrentChannel={setCurrentChannel}
/>
<Messages account={account} messages={messages}
currentChannel={currentChannel} />
</main>
</div>
);
}
export default App;


//ReportWebvital
const reportWebVitals = onPerfEntry => {
if (onPerfEntry && onPerfEntry instanceof Function) {
import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) =>
{
getCLS(onPerfEntry);
getFID(onPerfEntry);
getFCP(onPerfEntry);
getLCP(onPerfEntry);
getTTFB(onPerfEntry);
});
}
};
export default reportWebVitals;


//Deploy.js
const express = require('express')
const app = express()
const PORT = process.env.PORT || 3030
const server = app.listen(PORT, () => console.log(`Listening on ${PORT}\n`))
const messages = [
19
{
channel: "1",
account: "0xcA8Fa8f0b631EcdB18Cda619C4Fc9d197c8aFfCa",
text: "Welcome to Dappcord!"
},
{
channel: "2",
account: "0xcA8Fa8f0b631EcdB18Cda619C4Fc9d197c8aFfCa",
text: "Welcome to Dappcord everyone! My name is John and I've been a 
blockchain developer for 2+ years."
},
{
channel: "1",
account: "0x1b3cB81E51011b549d78bf720b0d924ac763A7C2",
text: "Hello everyone!"
},
{
channel: "2",
account: "0x1b3cB81E51011b549d78bf720b0d924ac763A7C2",
text: "Hey there! My name is Ann and I'm an aspiring blockchain 
developer!"
},
{
channel: "1",
account: "0x701C484bfb40ac628aFA487b6082f084B14AF0BD",
text: "Hey everyone!"
},
{
channel: "1",
account: "0x189B9cBd4AfF470aF2C0102f365FC1823d857965",
text: "Hey there, great to be here!"
},
{
channel: "1",
account: "0x176F3DAb24a159341c0509bB36B833E7fdd0a132",
text: "Hope everyone is having a good day ;)"
},
{
channel: "1",
account: "0x828103B231B39ffFCe028562412B3c04A4640e64",
text: "Hello!"
},
{
20
channel: "1",
account: "0x176F3DAb24a159341c0509bB36B833E7fdd0a132",
text: "Does anyone have any tips on becoming a blockchain developer?"
},
]
const { Server } = require("socket.io");
const io = new Server(server, {
cors: {
origin: "http://localhost:3000"
}
})
io.on('connection', (socket) => {
console.log('a user connected')
socket.on('get messages', () => {
io.emit('get messages', messages)
})
socket.on('new message', (msg) => {
messages.push(msg)
io.emit('new message', messages)
})
})

